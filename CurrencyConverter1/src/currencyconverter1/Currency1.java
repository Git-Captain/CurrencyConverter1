/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package currencyconverter1;

import java.awt.Image;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author Ahsan
 */
public class Currency1 extends javax.swing.JFrame {

    /**
     * Creates new form Currency1
     */
    public Currency1() {
        initComponents();
        setTime();
        getImage();
    }

    public void getImage() {
        ImageIcon icon1 = new ImageIcon(getClass().getResource("/image1/cy10.jpg"));

        Image img1 = icon1.getImage().getScaledInstance(jlLabelimage11.getWidth(), jlLabelimage11.getHeight(), Image.SCALE_SMOOTH);

        jlLabelimage11.setIcon(new ImageIcon(img1));

    }

    public void setTime() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Currency1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Date date = new Date();
                    SimpleDateFormat tf = new SimpleDateFormat("h:mm:ss aa");
                    SimpleDateFormat df = new SimpleDateFormat("EEEE, dd-MM-yyyy");
                    String time = tf.format(date);
                    jTxtTime.setText(time.split(" ")[0] + " " + time.split(" ")[1]);
                    jTxtDate.setText(df.format(date));
                }
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jlLabelimage11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JComboBox<>();
        txtTo = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        conVert = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTxtTime = new javax.swing.JLabel();
        jTxtDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("CURRENCY");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 29)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("CONVERTER");

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jlLabelimage11, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(216, 216, 216)
                .addComponent(jlLabelimage11, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Amount");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("From");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("To");

        txtFrom.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 11)); // NOI18N
        txtFrom.setForeground(new java.awt.Color(51, 51, 51));
        txtFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BDT", "EUR", "USD", "AED", "INR", "PKR", "CHF", "JPY", "RUB", "SAR", "BTC", "ETH", "XRP", " " }));

        txtTo.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 11)); // NOI18N
        txtTo.setForeground(new java.awt.Color(51, 51, 51));
        txtTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BDT", "EUR", "USD", "AED", "INR", "PKR", "CHF", "JPY", "RUB", "SAR", "BTC", "ETH", "XRP", " ", " ", " ", " " }));
        txtTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(0, 51, 102));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        conVert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        conVert.setForeground(new java.awt.Color(51, 51, 51));
        conVert.setText("Convert");
        conVert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conVertActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(102, 102, 102));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTxtTime.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        jTxtTime.setForeground(new java.awt.Color(102, 102, 102));
        jTxtTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jTxtDate.setBackground(new java.awt.Color(255, 255, 255));
        jTxtDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTxtDate.setForeground(new java.awt.Color(102, 102, 102));
        jTxtDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1)
                                    .addComponent(conVert, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFrom, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtAmount)
                                    .addComponent(txtTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTxtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTxtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conVert, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conVertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conVertActionPerformed

        String item1 = txtFrom.getSelectedItem().toString();
        String item2 = txtTo.getSelectedItem().toString();
        double Amount = Double.parseDouble(txtAmount.getText());
        double Cal = 0;

        if ("BDT".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.00839;
            }
        }
        if ("BDT".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.00925;
            }
        }
        if ("BDT".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.03395;
            }
        }
        if ("BDT".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 0.75673;
            }
        }
        if ("BDT".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 2.61517;
            }
        }
        if ("BDT".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.00823;
            }
        }
        if ("BDT".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 1.23517;
            }
        }
        if ("BDT".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 0.75602;
            }
        }
        if ("BDT".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 0.03466;
            }
        }
        if ("BDT".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00000031985;
            }
        }

        if ("BDT".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00000501175;
            }
        }
        if ("BDT".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.019558196;
            }
        }
        if ("EUR".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 1.1011;
            }
        }
        if ("EUR".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 4.0429;
            }
        }
        if ("EUR".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 90.029;
            }
        }
        if ("EUR".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 311.88;
            }
        }
        if ("EUR".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.98459;
            }
        }
        if ("EUR".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 149.243;
            }
        }
        if ("EUR".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 88.7202;
            }
        }
        if ("EUR".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 4.1266;
            }
        }
        if ("EUR".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00004;
            }
        }
        if ("EUR".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00058;
            }
        }
        if ("EUR".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 2.3020401;
            }
        }
        if ("USD".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 3.67152;
            }
        }
        if ("USD".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 81.758;
            }
        }
        if ("USD".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 283.227;
            }
        }
        if ("USD".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.89405;
            }
        }
        if ("USD".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 135.603;
            }
        }
        if ("USD".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 80.5695;
            }
        }
        if ("USD".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 3.74749;
            }
        }
        if ("USD".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00053;
            }
        }
        if ("USD".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00053;
            }
        }
        if ("USD".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 2.0845114;
            }
        }
        if ("EUR".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 115.586;
            }
        }
        if ("USD".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 104.967;
            }
        }
        if ("AED".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 28.5787;
            }
        }
        if ("INR".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 1.28367;
            }
        }
        if ("PKR".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 0.36906;
            }
        }
        if ("CHF".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 117.376;
            }
        }
        if ("JPY".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 0.77397;
            }
        }
        if ("RUB".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 1.30147;
            }
        }
        if ("SAR".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 27.9611;
            }
        }
        if ("BTC".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 0.00000031985;
            }
        }

        if ("ETH".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 199531;
            }
        }
        if ("XRP".equals(item1)) {
            if ("BDT".equals(item2)) {
                Cal = Amount * 51.27798;
            }
        }
        if ("USD".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.908;
            }
        }
        if ("AED".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.24721;
            }
        }
        if ("INR".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.0111;
            }
        }
        if ("PKR".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.0032;
            }
        }
        if ("CHF".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 1.01482;
            }
        }
        if ("JPY".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.00666;
            }
        }
        if ("RUB".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.01135;
            }
        }
        if ("SAR".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.24182;
            }
        }
        if ("BTC".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 26636.4;
            }
        }
        if ("ETH".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 1720.53;
            }
        }
        if ("XRP".equals(item1)) {
            if ("EUR".equals(item2)) {
                Cal = Amount * 0.42873328;
            }
        }
        if ("AED".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.27225;
            }
        }
        if ("INR".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.01224;
            }
        }
        if ("PKR".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.00352;
            }
        }
        if ("CHF".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 1.11764;
            }
        }
        if ("JPY".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.00734;
            }
        }
        if ("RUB".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.0125;
            }
        }
        if ("SAR".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.26645;
            }
        }
        if ("BTC".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 29348.8;
            }
        }
        if ("ETH".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 1895.73;
            }
        }
        if ("XRP".equals(item1)) {
            if ("USD".equals(item2)) {
                Cal = Amount * 0.47685048;
            }
        }
        if ("AED".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 22.2481;
            }
        }
        if ("INR".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.04492;
            }
        }
        if ("AED".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 77.1702;
            }
        }
        if ("PKR".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.01293;
            }
        }
        if ("AED".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.2434;
            }
        }
        if ("CHF".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 4.10348;
            }
        }
        if ("AED".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 37.1051;
            }
        }
        if ("JPY".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.02693;
            }
        }
        if ("AED".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 21.7681;
            }
        }
        if ("RUB".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.0459;
            }
        }
        if ("AED".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 1.02052;
            }
        }
        if ("SAR".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 0.97827;
            }
        }
        if ("AED".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00001;
            }
        }
        if ("BTC".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 107771;
            }
        }
        if ("AED".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00014;
            }
        }
        if ("ETH".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 6958.09;
            }
        }
        if ("AED".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.58587245;
            }
        }
        if ("XRP".equals(item1)) {
            if ("AED".equals(item2)) {
                Cal = Amount * 1.7069372;
            }
        }
        if ("INR".equals(item1)) {
            if ("CHF ".equals(item2)) {
                Cal = Amount * 0.010935651;
            }
        }
        if ("CHF".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 91.459237;
            }
        }
        if ("INR".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 1.66748;
            }
        }
        if ("JPY".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 0.59947;
            }
        }
        if ("INR".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 0.97853;
            }
        }
        if ("RUB".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 1.02118;
            }
        }
        if ("INR".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 0.04586;
            }
        }
        if ("SAR".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 21.775;
            }
        }
        if ("INR".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.000000416;
            }
        }
        if ("BTC".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 2398730;
            }
        }
        if ("INR".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00001;
            }
        }
        if ("ETH".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 154871;
            }
        }
        if ("INR".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.026369486;
            }
        }
        if ("XRP".equals(item1)) {
            if ("INR".equals(item2)) {
                Cal = Amount * 37.922621;
            }
        }
        if ("PKR".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.00315;
            }
        }
        if ("PKR".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 0.47997;
            }
        }
        if ("JPY".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 2.07929;
            }
        }
        if ("PKR".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 0.28166;
            }
        }
        if ("RUB".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 3.54204;
            }
        }

        if ("PKR".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 0.0132;
            }
        }
        if ("SAR".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 75.5284;
            }
        }
        if ("PKR".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.000000123490446;
            }
        }
        if ("BTC".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 8097792.43;
            }
        }
        if ("PKR".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.000001911002494;
            }
        }
        if ("ETH".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 523139.06;
            }
        }
        if ("PKR".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.007606086;
            }
        }
        if ("XRP".equals(item1)) {
            if ("PKR ".equals(item2)) {
                Cal = Amount * 131.4453;
            }
        }
        if ("CHF".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 152.3;
            }
        }
        if ("JPY".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.00656;
            }
        }
        if ("PKR".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 0.28166;
            }
        }
        if ("RUB".equals(item1)) {
            if ("PKR".equals(item2)) {
                Cal = Amount * 3.54204;
            }
        }
        if ("CHF".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 4.18968;
            }
        }
        if ("SAR".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.23822;
            }
        }
        if ("CHF".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00004;
            }
        }
        if ("BTC".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 26241.7;
            }
        }
        if ("CHF".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00059;
            }
        }
        if ("ETH".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 1694.26;
            }
        }
        if ("CHF".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 2.4100736;
            }
        }
        if ("XRP".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.41497421;
            }
        }
        if ("JPY".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 0.58668;
            }
        }
        if ("RUB".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 1.70305;
            }
        }
        if ("JPY".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 0.0275;
            }
        }
        if ("SAR".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 36.3149;
            }
        }
        if ("JPY".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.000000255519449;
            }
        }
        if ("BTC".equals(item1)) {
            if ("JPY ".equals(item2)) {
                Cal = Amount * 4000430;
            }
        }
        if ("JPY".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.000003955293504;
            }
        }
        if ("ETH".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 252825.74;
            }
        }
        if ("JPY".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.015745545;
            }
        }
        if ("XRP".equals(item1)) {
            if ("JPY".equals(item2)) {
                Cal = Amount * 63.544321;
            }
        }
        if ("RUB".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 0.04684;
            }
        }
        if ("RUB".equals(item1)) {
            if ("CHF".equals(item2)) {
                Cal = Amount * 0.01117;
            }
        }
             if ("CHF".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 89.3875;
            }
        }
        if ("SAR".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 21.3107;
            }
        }
        if ("RUB".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.000000436776188;
            }
        }
        if ("BTC".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 2347570;
            }
        }
        if ("RUB".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00001;
            }
        }
        if ("ETH".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 151568;
            }
        }
        if ("RUB".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.026893829;
            }
        }
        if ("XRP".equals(item1)) {
            if ("RUB".equals(item2)) {
                Cal = Amount * 37.188817;
            }
        }
        if ("SAR".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.00001;
            }
        }
        if ("BTC".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 110033;
            }
        }
        if ("SAR".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.00014;
            }
        }
        if ("ETH".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 7104.13;
            }
        }
        if ("SAR".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 0.57423827;
            }
        }
        if ("XRP".equals(item1)) {
            if ("SAR".equals(item2)) {
                Cal = Amount * 1.7414694;
            }
        }
        if ("BTC".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 15.477182431930302;
            }
        }
        if ("ETH".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.064611243318871;
            }
        }
        if ("BTC".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 61562.869;
            }
        }
        if ("XRP".equals(item1)) {
            if ("BTC".equals(item2)) {
                Cal = Amount * 0.000016241787467;
            }
        }
        if ("ETH".equals(item1)) {
            if ("XRP".equals(item2)) {
                Cal = Amount * 3978.1225;
            }
        }
        if ("XRP".equals(item1)) {
            if ("ETH".equals(item2)) {
                Cal = Amount * 0.000251459595059;
            }
        }

        jTextField1.setText("" + String.format("%.2f", Cal));

        // TODO add your handling code here:
    }//GEN-LAST:event_conVertActionPerformed

    private void txtToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Currency1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Currency1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Currency1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Currency1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Currency1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton conVert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jTxtDate;
    private javax.swing.JLabel jTxtTime;
    private javax.swing.JLabel jlLabelimage11;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JComboBox<String> txtFrom;
    private javax.swing.JComboBox<String> txtTo;
    // End of variables declaration//GEN-END:variables

}
